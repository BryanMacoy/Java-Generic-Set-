package hw05;

public class SortedSet<E extends Comparable<E>> {

	private int size; // Specifying the current size of the list.
	private E[] set = (E[]) (new Comparable[size]); // An array of generic type holding the data.

	// ************************************************************************

	/** Constructor */
	public SortedSet() {
		this.set = (E[]) (new Comparable[10]);
	}

	/** Constructor which accepts one integer parameter. */
	public SortedSet(int capacity) {
		this.set = (E[]) new Comparable[capacity];
	}

	/** Constructor which accepts an array or a comma-separated list of values. */
	public SortedSet(E... values) {
		this.set = (E[]) (new Comparable[values.length]);
		// Make a deep copy to prevent shared references.
		System.arraycopy(values, 0, this.set, 0, values.length);
	}

	// Create a copy constructor which will make a deep copy of a SortedSet.
	public SortedSet(SortedSet<E>[] SortedSet) {
		// Make a deep copy to prevent shared references.
		System.arraycopy(SortedSet, 0, this.set, 0, SortedSet.length);
	}

	// ************************************************************************

	public boolean exists(E value) {
		for (int i = 0; i < size; i++)
			if (value.equals(set[i]))
				return true;
		return false;
	}// ************************************************************************

	public void add(E value) {
		if (!this.exists(value)) {
			resize();
			// Move the elements to the right after the specified index
			for (int i = size - 1; i >= set.length; i--)
				set[i + 1] = set[i];
			// Insert new element to set[size]
			set[size] = value;
			size++;
		}
	}// ************************************************************************

	public void addAll(E... values) {
		resize();
		for (int i = 0; i < values.length; i++)
			add(values[i]);
	}// ************************************************************************

	/** Define method to remove */
	public void remove(E value) {
		// Shift data to the left
		for (int i = 0; i < size(); i++) {
			if (set[i] == value) {
				for (int j = i; j < size - 1; j++) {
					set[j] = set[j + 1];
				}
				size--;
			}
		}
	}// ************************************************************************

	/**
	 * This method shall take an integer index as a parameter and return the data at
	 * the given index.
	 */
	public E get(int index) {
		if (index < 0 || index >= size)
			throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
		return set[index];
	}// ************************************************************************

	/** This method returns the current size of the array. */
	public int size() {
		return size;
	}// ************************************************************************

	// method to return true if this MyArray is equal to other
	@Override
	public boolean equals(Object obj) {
		// obj of MyArray type
		if (obj instanceof SortedSet<?>) {
			// cast the Object to MyArray
			SortedSet<E> isEqual = ((SortedSet<E>) obj);

			// length of both MyArray are same
			if (set.length == isEqual.set.length) {
				// loop over the data elements
				for (int i = 0; i < set.length; i++) {
					// if data type of both the objects are same
					if (set[i].getClass().equals(isEqual.set[i].getClass())) {
						// if ith element of both array not equal
						if (set[i].compareTo((E) isEqual.set[i]) != 0)
							return false;
					} else // data type are not equal
						return false;
				}

				return true; // all elements are equal
			}
		}
		return false;
	}// ************************************************************************

	@Override
	public String toString() {
		StringBuilder result = new StringBuilder("[");
		for (int i = 0; i < size; i++) {
			result.append(set[i]);
			if (i < size - 1)
				result.append(", ");
		}
		return result.toString() + "]";
	}// ************************************************************************

	private void resize() {
		if (size() >= set.length) {
			E[] newSet = (E[]) (new Comparable[set.length * 2]);
			System.arraycopy(set, 0, newSet, 0, size);
			set = newSet;
		}
	}// ************************************************************************

	/**
	 * This method shall sort the array and shall be implemented with the following
	 * sorting algorithm (given in pseudocode). NOTE: This method does not return a
	 * new array, just sorts the existing array.
	 */
	public void sort(SortedSet set1) {
		SortedSet intersectionSet = new SortedSet<>();
		SortedSet setA = set1;
		for (int i = 0; i < intersectionSet.size(); i++) {
			// Sort in Ascending Order
			if (setA.exists(setA.get(i).compareTo(setA.get(i + 1)) > 0)) {
				intersectionSet.add(setA.get(i));
				setA.get(i) = setA.get(i + 1);
				setA.get(i + 1) = intersectionSet;
			}
		}
	}
	if (setB.exists(setA.get(i))) {
		intersectionSet.add(setA.get(i));
		setB.remove(setA.get(i));
		setA.remove(setA.get(i));
	}
}
