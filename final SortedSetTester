/* Ray Bryan Macoy
 * Course CS 2013, Section 03
 * October 15,2020
 * Purpose: Use Generics and Lists to create a Generic Set class. 
 * Description: This class Tests the SortedSet And SortedSetUtils Classes.
 */

package hw05;

public class SortedSetTester {

	public static void main(String args[]) {

		/** create a set list */
		SortedSet<String> petSet = new SortedSet<>();
		System.out.println("\n Current set capacity: " + petSet.capacity());

		/****************************
		 * Add one or more values: *
		 *****************************/
		petSet.add("dog");
		System.out.println("\n ***************************\n" + " * Add one or more values: *\n"
				+ " ***************************\n\n" + " Pet Set:\t" + petSet + "\n Set size: " + petSet.size());

		petSet.add("cat");
		System.out.println(" Pet Set:\t" + petSet + "\n Set size: " + petSet.size());

		// Add more than one value
		petSet.addAll("hamster", "bird", "fish", "computer", "snake", "frog", "duck", "pig", "lizard");
		System.out.println(
				" Pet Set:\t" + petSet + "\n Set size: " + petSet.size() + "\n\n Current set capacity: " + petSet.capacity());

		/*******************
		 * Remove a value *
		 ********************/
		petSet.remove("computer");
		System.out.println("\n *******************\n" + " * Remove a value: *\n" + " *******************\n\n"
				+ " Remove computer because it is not a pet." + "\n Set:\t" + petSet + "\n Set size: " + petSet.size());

		/****************************
		 * Check if a value exists: *
		 ****************************/
		System.out.println("\n ****************************\n" + " * Check if a value exists: *\n"
				+ " ****************************\n\n" + " Is there a cat in the set? \t" + petSet.exists("cat")
				+ "\n Is there a tiger in the set? \t" + petSet.exists("tiger")
				+ "\n What is the value in the 4th index? \t" + petSet.get(4)
				+ "\n What is the value in the 8th index? \t" + petSet.get(8));

		/******************************
		 * Compare two separate sets *
		 *******************************/
		SortedSet<Integer> setA = new SortedSet<>();
		SortedSet<Integer> setB = new SortedSet<>();

		// Populate setA with values
		for (int i = 1; i < 11; i++) {
			setA.add(i);
		}
		// Populate setB with values
		for (int i = 1; i < 11; i++) {
			setB.add(i);
		}

		System.out.println("\n ***********************************************\n"
				+ " * Compare two separate sets that are similar: *\n"
				+ " ***********************************************\n\n" + " Set A:\t" + setA + "\n Set A size: "
				+ setA.size() + "\n\n Set B:\t" + setB + "\n Set B size: " + setB.size()
				+ "\n\n Is set A and set B equal?   " + setA.equals(setB));

		// Test the methods from SortedSetUtils
		System.out.println("\n Similar values within the sets: " + SortedSetUtils.intersection(setA, setB));
		System.out.println(" Combine distinct values within the sets: " + SortedSetUtils.union(setA, setB));

		// Remove all of the values from setB
		for (int i = 1; i < 11; i++) {
			setB.remove(i);
		}
		System.out.println("\n Remove all values from Set B: " + setB);

		// Populate SetB with new integer values
		for (int i = 6; i < 20; i++) {
			setB.add(i);
		}

		System.out.println("\n New Set B: " + setB + "\n\n Set A Capacity: " + setA.capacity() + "\n Set B Capacity: "
				+ setB.capacity());

		System.out.println("\n *************************************************\n"
				+ " * Compare two separate sets that are different: *\n"
				+ " *************************************************\n\n" + " Set A:\t" + setA + "\n Set size: "
				+ setA.size() + "\n\n Set B:\t" + setB + "\n Set size: " + setB.size()
				+ "\n\n Is set A and set B equal?   " + setA.equals(setB));

		// Test the methods from SortedSetUtils
		System.out.println("\n Similar values within the sets: " + SortedSetUtils.intersection(setA, setB));
		System.out.println(" Combine distinct values within the sets: " + SortedSetUtils.union(setA, setB));

		// Remove all of the values from setA
		for (int i = 1; i < 11; i++) {
			setA.remove(i);
		}
		// Populate SetA with new integer values
		for (int i = 0; i < 6; i++) {
			setA.add(i);
		}

		System.out.println("\n ************************************************************\n"
				+ " * Compare two separate sets that are completely different: *\n"
				+ " ************************************************************\n\n" 
				+ " New Set A:\t" + setA + "\n Set size: "
				+ setA.size() + "\n\n Set B:\t" + setB + "\n Set size: " + setB.size()
				+ "\n\n Is set A and set B equal?   " + setA.equals(setB));

		// Test the methods from SortedSetUtils
		System.out.println("\n Similar values within the sets: " + SortedSetUtils.intersection(setA, setB));
		System.out.println(" Combine distinct values within the sets: " + SortedSetUtils.union(setA, setB));
	}
}
