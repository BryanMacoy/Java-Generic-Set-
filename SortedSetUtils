

public class SortedSetUtils {

	private SortedSetUtils() {
	}

	public static SortedSet intersection(SortedSet set1, SortedSet set2) {
		SortedSet intersectionSet = new SortedSet<>();
		//set1.sort();
		//set2.sort();
		SortedSet setA = set1;
		SortedSet setB = set2;
		for (int i = 0; i < set1.size(); i++) {
			if (setB.exists(setA.get(i))) {
				intersectionSet.add(setA.get(i));
				setB.remove(setA.get(i));
				setA.remove(setA.get(i));
			}
		}

		return intersectionSet;
	}

	public static SortedSet union(SortedSet set1, SortedSet set2) {
		SortedSet unionSet = new SortedSet<>();
		//set1.sort();
		//set2.sort();
		SortedSet setA = set1;
		SortedSet setB = set2;

		for (int i = 0; i < set1.size(); i++) {
			if (setB.exists(setA.get(i))) {
				unionSet.add(setA.get(i));
				setA.remove(setA.get(i));
				setB.remove(setA.get(i));
			}
		}
		for (int i = 0; i < set1.size(); i++)
			unionSet.add(setA.get(i));
		for (int i = 0; i < setB.size(); i++)
			unionSet.add(setB.get(i));

		return unionSet;
	}
}
